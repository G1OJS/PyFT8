import numpy as np

def int_to_bitsLE(n, width):
    """Return [b(width-1), ..., b0], MSB-first."""
    return [ (n >> (width - 1 - i)) & 1 for i in range(width) ]

kNRW = np.array([7, 6, 6, 6, 7, 6, 7, 6, 6, 7, 6, 6, 7, 7, 6, 6, 6, 7, 6, 7, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 7, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6], dtype=int)

kMN = np.array([
[16,25,33,1,2,3,4,5,8,9,10,11,12,14,15,17,18,22,23,24,26,27,29,3,5,46,51,55,44,43,1,2,4,7,8,9,10,11,12,13,14,15,17,19,20,21,24,25,35,36,37,38,39,41,20,46,45,27,1,2,3,4,5,6,7,8,9,11,12,13,14,16,17,18,19,22,23,7,29,33,18,13,5,47,54,45,10,14,22,35,1,1,2,3,4,1,6,7,8,9,10,11,12,13,11,15,7,17,18,19,20,21,22,13,2,23,26,27,21,29,19,3,14,33,30,6,27,25,38,20,18,32,42,28,34,31,46,6,8,40,17,42,4,36,13,2,56,5,12,59,3,45,1,7,11,14,16,10,15,17,20,12,23,27,24,19,34,35,33,40,41,49,20,42],
[45,51,58,44,7,6,35,13,56,64,19,36,37,32,63,28,74,53,30,31,41,57,49,38,39,50,52,71,67,68,32,6,16,65,30,22,18,23,28,52,50,81,29,33,26,34,27,55,53,48,46,45,57,56,49,52,70,35,15,68,36,28,31,20,40,60,10,44,39,24,21,71,30,25,61,38,41,26,32,40,34,42,26,69,55,62,63,66,60,39,46,24,5,31,49,4,60,32,48,35,39,14,71,23,35,16,9,54,50,30,64,28,25,22,47,54,34,36,36,40,26,46,15,52,43,9,33,69,55,39,29,48,51,44,60,45,68,24,10,41,50,66,22,64,29,8,67,38,38,72,26,76,65,18,56,39,37,28,60,25,30,67,75,32,69,21,53,46,59,43,42,75,44,49],
[73,62,78,45,61,54,48,21,79,69,66,60,58,43,80,77,83,81,34,40,76,70,65,78,82,73,74,72,72,78,59,71,54,67,42,31,76,82,61,79,51,83,60,64,73,40,77,58,66,68,75,47,69,62,53,63,75,80,30,80,51,51,56,37,82,69,49,57,59,55,65,78,76,80,83,77,50,58,81,73,48,64,43,72,70,68,67,72,74,79,64,66,70,65,58,5,67,75,82,41,62,61,74,78,55,79,16,63,57,47,80,69,43,37,51,74,72,37,63,44,57,82,58,53,52,52,65,73,83,77,56,71,59,79,62,61,77,76,78,70,53,68,72,81,47,81,73,50,64,80,79,81,74,77,59,54,66,55,70,82,31,68,80,62,75,71,61,47,76,83,63,83,48,57],
])

colorder = [0,  1,  2,  3, 28,  4,  5,  6,  7,  8,  9, 10, 11, 34, 12, 32, 13, 14, 15, 16, &
 17, 18, 36, 29, 43, 19, 20, 42, 21, 40, 30, 37, 22, 47, 61, 45, 44, 23, 41, 39, &
 49, 24, 46, 50, 48, 26, 31, 33, 51, 38, 52, 59, 55, 66, 57, 27, 60, 35, 54, 58, &
 25, 56, 62, 64, 67, 69, 63, 68, 70, 72, 65, 73, 75, 74, 71, 77, 78, 76, 79, 80, &
 53, 81, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, &
100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119, &
120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139, &
140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159, &
160,161,162,163,164,165,166,167,168,169,170,171,172,173]

M = kMN.shape[0]
N = kMN.shape[1]


import numpy as np

def gf2_inv(A):
    """Invert square binary matrix A over GF(2)."""
    A = A.copy() % 2
    n = A.shape[0]
    I = np.eye(n, dtype=int)
    aug = np.concatenate([A, I], axis=1)
    r = c = 0
    while r < n and c < n:
        piv = np.where(aug[r:, c] == 1)[0]
        if len(piv) == 0:
            c += 1
            continue
        piv = piv[0] + r
        aug[[r, piv]] = aug[[piv, r]]
        for rr in range(n):
            if rr != r and aug[rr, c] == 1:
                aug[rr] ^= aug[r]
        r += 1
        c += 1
    return aug[:, n:]

def generator_from_H(H):
    """Compute systematic G = [I | P] with H = [A | B], B invertible."""
    H = H % 2
    m, n = H.shape
    k = n - m

    # choose the last m columns as B (WSJT-X does this)
    A = H[:, :k]
    B = H[:, k:]
    B_invT = gf2_inv(B).T
    P = (A.T @ B_invT) % 2
    G = np.concatenate([np.eye(k, dtype=int), P], axis=1) % 2
    return G



print(f"kMN shape {kMN.shape}")
H = np.zeros(( M, N), dtype=int)
for m in range(M):
    for n1 in kMN[m]:
        if n1 > 0:
            H[m, n1-1] = 1

print(f"H shape {H.shape}")
G = generator_from_H(H.astype(int))
print(f"G shape {G.shape}")
print("G matrix generated from H:")
for r in G:
    print(''.join([str(c) for c in r]))

generator_matrix_rows = ["8329ce11bf31eaf509f27fc",  "761c264e25c259335493132",  "dc265902fb277c6410a1bdc",  "1b3f417858cd2dd33ec7f62",  "09fda4fee04195fd034783a",  "077cccc11b8873ed5c3d48a",  "29b62afe3ca036f4fe1a9da",  "6054faf5f35d96d3b0c8c3e",  "e20798e4310eed27884ae90",  "775c9c08e80e26ddae56318",  "b0b811028c2bf997213487c",  "18a0c9231fc60adf5c5ea32",  "76471e8302a0721e01b12b8",  "ffbccb80ca8341fafb47b2e",  "66a72a158f9325a2bf67170",  "c4243689fe85b1c51363a18",  "0dff739414d1a1b34b1c270",  "15b48830636c8b99894972e",  "29a89c0d3de81d665489b0e",  "4f126f37fa51cbe61bd6b94",  "99c47239d0d97d3c84e0940",  "1919b75119765621bb4f1e8",  "09db12d731faee0b86df6b8",  "488fc33df43fbdeea4eafb4",  "827423ee40b675f756eb5fe",  "abe197c484cb74757144a9a",  "2b500e4bc0ec5a6d2bdbdd0",  "c474aa53d70218761669360",  "8eba1a13db3390bd6718cec",  "753844673a27782cc42012e",  "06ff83a145c37035a5c1268",  "3b37417858cc2dd33ec3f62",  "9a4a5a28ee17ca9c324842c",  "bc29f465309c977e89610a4",  "2663ae6ddf8b5ce2bb29488",  "46f231efe457034c1814418",  "3fb2ce85abe9b0c72e06fbe",  "de87481f282c153971a0a2e",  "fcd7ccf23c69fa99bba1412",  "f0261447e9490ca8e474cec",  "4410115818196f95cdd7012",  "088fc31df4bfbde2a4eafb4",  "b8fef1b6307729fb0a078c0",  "5afea7acccb77bbc9d99a90",  "49a7016ac653f65ecdc9076",  "1944d085be4e7da8d6cc7d0",  "251f62adc4032f0ee714002",  "56471f8702a0721e00b12b8",  "2b8e4923f2dd51e2d537fa0",  "6b550a40a66f4755de95c26",  "a18ad28d4e27fe92a4f6c84",  "10c2e586388cb82a3d80758",  "ef34a41817ee02133db2eb0",  "7e9c0c54325a9c15836e000",  "3693e572d1fde4cdf079e86",  "bfb2cec5abe1b0c72e07fbe",  "7ee18230c583cccc57d4b08",  "a066cb2fedafc9f52664126",  "bb23725abc47cc5f4cc4cd2",  "ded9dba3bee40c59b5609b4",  "d9a7016ac653e6decdc9036",  "9ad46aed5f707f280ab5fc4",  "e5921c77822587316d7d3c2",  "4f14da8242a8b86dca73352",  "8b8b507ad467d4441df770e",  "22831c9cf1169467ad04b68",  "213b838fe2ae54c38ee7180",  "5d926b6dd71f085181a4e12",  "66ab79d4b29ee6e69509e56",  "958148682d748a38dd68baa",  "b8ce020cf069c32a723ab14",  "f4331d6d461607e95752746",  "6da23ba424b9596133cf9c8",  "a636bcbc7b30c5fbeae67fe",  "5cb0d86a07df654a9089a20",  "f11f106848780fc9ecdd80a",  "1fbb5364fb8d2c9d730d5ba",  "fcb86bc70a50c9d02a5d034",  "a534433029eac15f322e34c",  "c989d9c7c3d3b8c55d75130",  "7bb38b2f0186d46643ae962",  "2644ebadeb44b9467d1f42c",  "608cc857594bfbb55d69600"]
kGEN = np.array([int(row,16)>>1 for row in generator_matrix_rows])
print("G matrix from fortran:")
print(f"kGEN shape {kGEN.shape}")
print(''.join([f"{r:091b}\n" for r in kGEN]))



